{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/runtime-ccc84bcedee95453.js","src/index.js","src/js/createMainMarkup.js","node_modules/@parcel/runtime-js/lib/runtime-70c3aabb32a86823.js","src/js/pagination.js","src/js/preloader.js","src/js/inputCheck.js"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"5ZPII\\\":\\\"index.80d38604.js\\\",\\\"fKKvY\\\":\\\"filmWrap.dabdf2b2.jpg\\\",\\\"4627Z\\\":\\\"my-library.c596ee23.js\\\"}\"));","import './js/btn-anchor';\nimport './js/createMainMarkup';\nimport './js/pagination';\nimport './js/preloader';\nimport './js/inputCheck';\nimport './js/localstorageApp';\nimport './js/modal-film-info';\nimport './js/changeTheme';\nimport './js/modal-team';\nimport './js/modal-authorization';\n\nimport './js/library-main'\n\nimport './js/auth-firebase';\n\n","import { searchGenresById } from './genresList';\nimport { refs } from './refs';\nimport ApiFilmoteka from './filmotekaApi';\nimport { renderFoo } from './renderMarkup';\nimport img from '../images/filmWrap.jpg';\nimport pagination from './pagination';\nconst api = new ApiFilmoteka();\n\nimport { refs } from './refs';\nconst cardListEl = document.querySelector('ul.card__list');\n\n// —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤\nexport async function createMainMarkup() {\n  //–ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É\n  const results = await api.fetchPopularsFilms();\n  refs.fetchDataValue = results;\n  // –ø–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ –µ–ª–µ–º–µ–Ω—Ç–æ–≤ 'li' , –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—Ç—Ä–æ–∫—É —Å –ø–æ–º–æ—â—é join\n  const filmCards = results\n    .map(\n      ({\n        id,\n        poster_path,\n        title,\n        genre_ids,\n        release_date,\n      }) => `<li class=\"film__item\">\n        <a class=\"film__link\" id=\"${id}\">\n  <div class=\"film__wrap\">\n      <img src=${\n        poster_path ? `https://image.tmdb.org/t/p/original${poster_path}` : img\n      } class=\"film-item__img\" alt=\"${title}\" width=\"300\">\n  </div>\n  <div class=\"wrap__film>\n  <div class=\"film__title-wrap\">\n  <h3 class=\"film__title\">${title}</h3>\n  </div>\n  <div class=\"film__genres-and-date\">\n  <p class=\"film__genres\">${\n    searchGenresById(genre_ids) ? searchGenresById(genre_ids) : 'Unknown genre'\n  }</p>\n  <p class=\"film__release-date\">${\n    //–ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Ç–µ—Ä–Ω–∞—Ä–Ω–∏–∫\n    release_date ? new Date(release_date).getFullYear() : 'Nobody know'\n  }</p>\n\n   </div>\n   </div>\n   </a>\n   </li>`\n    )\n    .join('');\n\n  // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É\n  renderFoo(filmCards, refs.cardListEl);\n\n  await pagination(api.pageNumber, api.totalPages);\n\n  return filmCards;\n}\n// –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é render\ncreateMainMarkup();\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"fKKvY\")).toString();","import ApiFilmoteka from './filmotekaApi';\nimport { preloaderRefresh, preloaderRefreshOFF } from './preloader';\nimport { refs } from './refs';\n// import createMainMarkup from './createMainMarkup'\nconst apiFilmoteka = new ApiFilmoteka();\nconst paginationBox = document.querySelector('.paginationBox');\nlet globalCurrentpage = 0;\n\nexport default function pagination(currentPage, allPages) {\n  let markup = '';\n  let beforeTwoPage = currentPage - 2;\n  let beforePage = currentPage - 1;\n  let afterPage = currentPage + 1;\n  let afterTwoPage = currentPage + 2;\n  globalCurrentpage = currentPage;\n  if (currentPage > 1) {\n    markup += `<li class=\"paginationRow\">&#129144;</li>`;\n  }\n  if (currentPage > 1) {\n    markup += `<li>1</li>`;\n  }\n\n  if (currentPage > 4) {\n    markup += `<li>...</li>`;\n  }\n  if (currentPage > 3) {\n    markup += `<li>${beforeTwoPage}</li>`;\n  }\n  if (currentPage > 2) {\n    markup += `<li>${beforePage}</li>`;\n  }\n  markup += `<li class=\"paginationPage--current\">${currentPage}</li>`;\n  if (allPages - 1 > currentPage) {\n    markup += `<li>${afterPage}</li>`;\n  }\n  if (allPages - 2 > currentPage) {\n    markup += `<li>${afterTwoPage}</li>`;\n  }\n  if (allPages - 3 > currentPage) {\n    markup += `<li>...</li>`;\n  }\n  if (allPages > currentPage) {\n    markup += `<li class=\"avd\">${currentPage + 5}</li>`;\n    markup += `<li class=\"paginationRow\">&#129146;<li>`;\n  }\n\n  paginationBox.innerHTML = markup;\n}\n\npaginationBox.addEventListener('click', handlerPagination);\n\nasync function handlerPagination(evt) {\n   preloaderRefresh()\n  if (evt.target.nodeName !== 'LI') {\n    return;\n  }\n \n  if (evt.target.textContent === 'ü°∏') {\n    apiFilmoteka.setPageNumber((globalCurrentpage -= 1));\n    \n    const filesFromBackend = await apiFilmoteka.fetchPopularsFilms();\n\n    cleanerMarkup(cardListEl);\n    createMainMarkup(filesFromBackend);\n\n    pagination(apiFilmoteka.pageNumber, apiFilmoteka.totalPages);\n\n    return;\n  }\n  if (evt.target.textContent === 'ü°∫') {\n    apiFilmoteka.setPageNumber((globalCurrentpage += 1));\n    console.log(apiFilmoteka.pageNumber);\n    \n    const filesFromBackend = await apiFilmoteka.fetchPopularsFilms();\n\n    cleanerMarkup(cardListEl);\n    createMainMarkup(filesFromBackend);\n\n    pagination(apiFilmoteka.pageNumber, apiFilmoteka.totalPages);\n\n    return;\n  }\n  if (evt.target.textContent === '...') {\n    return;\n  }\n  const page = evt.target.textContent;\n\n  apiFilmoteka.setPageNumber(Number(page));\n  const filesFromBackend = await apiFilmoteka.fetchPopularsFilms();\n\n  cleanerMarkup(cardListEl);\n  createMainMarkup(filesFromBackend);\n  \n  pagination(apiFilmoteka.pageNumber, apiFilmoteka.totalPages);\n  preloaderRefreshOFF()\n}\n// Import\n\nimport ApiFilmoteka from './filmotekaApi';\nimport { cleanerMarkup } from './cleanerMarkup';\nimport { searchGenresById } from './genresList';\nimport { renderFoo } from './renderMarkup';\nconst cardListEl = document.querySelector('ul.card__list');\n//Initialize class instance\nconst api = new ApiFilmoteka();\n\nfunction createMainMarkup(fetchedData) {\n  //Getting results from API\n  \n  refs.fetchDataValue = fetchedData;\n  //Chegking response from API\n  if (!fetchedData) {\n  } else {\n    // –ø–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ –µ–ª–µ–º–µ–Ω—Ç–æ–≤ 'li' , –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—Ç—Ä–æ–∫—É —Å –ø–æ–º–æ—â—é join\n    const filmCards = fetchedData\n      .map(\n        ({\n          id,\n          poster_path,\n          title,\n          genre_ids,\n          release_date,\n        }) => `<li class=\"film__item\">\n        <a class=\"film__link\" id=\"${id}\">\n  <div class=\"film__wrap\">\n  <img src=${\n    poster_path ? `https://image.tmdb.org/t/p/original${poster_path}` : img\n  } class=\"film-item__img\" alt=\"${title}\" width=\"300\">\n  </div>\n  <div>\n  <h3 class=\"film__title\">${title}</h3>\n  </div>\n  <div class=\"film__genres-and-date\">\n  <p class=\"film__genres\">${searchGenresById(genre_ids)}</p>\n  <p class=\"film__release-date\">${\n    release_date ? new Date(release_date).getFullYear() : 'Nobody know'\n  }</p>\n   </div>\n   </a>\n   </li>`\n      )\n      .join('');\n    \n    // Running render function\n    renderFoo(filmCards, cardListEl);\n    return filmCards;\n  }\n}\n","import { refs } from \"./refs\";\n\nexport function preloaderRefresh() {\n  refs.bodyEl.classList.add('no-scroll');\n  refs.preloaderEl.classList.remove('preloader--hide');\n  setTimeout(() => {\n    refs.bodyEl.scrollIntoView({ top: 0, behavior: 'smooth' });\n  },100)\n  // console.log(\"–ó–ê–ü–£–°–ö –ü–†–ï–õ–û–£–î–ï–†–ê\");\n}\n\nexport function preloaderRefreshOFF() {\n  refs.bodyEl.classList.remove('no-scroll');\n  const arrElements = Array.from(refs.imgElArr);\n  // console.log(arrElements);\n  \n  if (arrElements.length === 0) {\n      refs.preloaderEl.classList.add('preloader--hide');\n  }\n  \n    arrElements.forEach((el, index) => {\n      el.onload = () => {\n\n        if (index === arrElements.length - 1) {\n          refs.preloaderEl.classList.add('preloader--hide');\n          // console.log(\"–í–´–ö–õ –ü–†–ï–õ–û–£–î–ï–†–ê\");\n        }\n        // console.log(\"–º—ã –º–æ–ª–æ–¥—Ü—ã\")\n      }\n    });\n}\n\n\n\nfunction preloaderOn() {\n  refs.bodyEl.classList.add('no-scroll');\n  refs.preloaderEl.classList.remove('preloader--hide');\n   window.addEventListener('load', onLoad);\n  }\n    \nfunction  onLoad(e) {\n    refs.preloaderEl.classList.add('preloader--hide');\n    refs.bodyEl.classList.remove('no-scroll');\n    window.removeEventListener('load', onLoad);\n    // console.log('C window —Å–ª—É—à–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç');\n  }\n\npreloaderOn();\n\n\n\n\n\n// export class Preloader {\n  \n//   constructor() {\n//     this.preloaderEl = document.querySelector('.preloader');\n  \n//   }\n\n//   preloaderOn() {\n//    window.addEventListener('load', this.onLoad);\n//   }\n    \n//   onLoad(e) {\n//     console.log(this.preloaderEl.classList);\n//     this.preloaderEl.classList.add('preloader--hide');\n//     // window.removeEventListener('load', onLoad);\n//     // console.log('C window —Å–ª—É—à–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç');\n//   }\n\n\n// }\n\n// const preloaderApp = new Preloader();\n// console.log(preloaderApp);\n// preloaderApp.preloaderOn()\n\n\n\n\n\n\n\n//  class Preloader {\n\n//   constructor() {\n//     this.preloderEl = document.querySelector('#preloader');\n//     this.precentsEl = document.querySelector('#precents');\n//     this.dataLength = 20;\n//     this.counter = 0;\n// }\n\n//   showPreloader() {\n//     this.preloderEl.classList.remove('preloader--hide')\n//   }\n//   hidePreloader() {\n//     this.preloderEl.classList.add('preloader--hide')\n//   }\n//   setCounter(dataLength) {\n//     this.dataLength = dataLength;\n//     console.log(dataLength)\n//   }\n//    precentsLoader() {\n//      let inc = 100 / this.dataLength;\n\n//      let timerId = setInterval(() => {\n//        this.counter++\n//        this.precentsEl.innerHTML = ((this.counter * 100) / this.dataLength).toFixed();\n\n//        if (this.counter === this.dataLength) {\n//          clearInterval(timerId);\n//          this.hidePreloader();\n//        }\n//      }, 100)\n    \n//   }\n\n// }\n\n\n\n// window.addEventListener('load', (e) => {\n//   // console.log(\"—Å—Ç—Ä–∞–Ω–∏—á–∫–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å\");\n//   // const mediaFiles = document.querySelectorAll('img');\n//   // console.log(mediaFiles.length);\n//   // preloader.dataLength = mediaFiles.length;\n//   preloader.precentsLoader()\n  \n// })\n\n\n// export function prelouderOn() {\n//   window.addEventListener('DOMContentLoaded', loader);\n// }\n\n// function loader(e) {\n  \n//   setTimeout(() => {\n//     const preloaderRef = document.querySelector('.preloader');\n//     const precentsRef = document.querySelector('#precents');\n\n//     console.log(precentsRef);\n//     const mediaFiles = document.querySelectorAll('film-item__img');\n//     let i = 0;\n//     // console.log(e)\n//     console.log(mediaFiles);\n    \n//     Array.from(mediaFiles).forEach((el, index) => {\n//       el.onload = () => {\n//         i++\n        \n//         precentsRef.innerHTML = ((i * 100) / mediaFiles.length).toFixed();\n\n//         if (i === mediaFiles.length) {\n//           precentsRef.innerHTML = 100;\n//           preloaderRef.classList.add('preloader--hide');\n          \n//           window.removeEventListener('DOMContentLoaded', loader);\n//           // console.log(\"C–ª—É—à–∞—Ç–µ–ª—å DOMContentLoaded c window —Å–Ω—è—Ç!\");\n//         }\n//       }\n    \n//     })\n//   },200)\n\n// }\n\n// prelouderOn()\n\n\n\n\n\n","// Import\nimport ApiFilmoteka from './filmotekaApi';\nimport img from '../images/filmWrap.jpg';\nimport { cleanerMarkup } from './cleanerMarkup';\nimport { searchGenresById } from './genresList';\nimport { renderFoo } from './renderMarkup';\nimport { refs } from './refs';\nimport { preloaderRefresh, preloaderRefreshOFF } from './preloader';\n\n\n\n//Initialize class instance\n\nconst api = new ApiFilmoteka();\nrefs.headerFormEl.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n\n  let query = event.target.elements[0].value.trim();\n  //Checking for query existance\n  if (query) {\n    preloaderRefresh();\n    //Cleaning markup\n    cleanerMarkup(refs.cardListEl);\n    //Setting querry to api of ApiFilmoteka\n    api.setFilmName(query);\n    createMainMarkup(api.fetchFilmsByName());\n  } else {\n    //Running error message function\n    errorMessage();\n    return;\n  }\n}\n\nasync function createMainMarkup(fetchedData) {\n  //Getting results from API\n  const results = await fetchedData;\n  refs.fetchDataValue = results;\n  //Chegking response from API\n  if (!results.length) {\n    await errorMessage();\n  } else {\n    refs.headerErrorEl.classList.add('visually-hidden');\n    // –ø–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ –µ–ª–µ–º–µ–Ω—Ç–æ–≤ 'li' , –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—Ç—Ä–æ–∫—É —Å –ø–æ–º–æ—â—é join\n    const filmCards = results\n      .map(\n        ({\n          id,\n          poster_path,\n          title,\n          genre_ids,\n          release_date,\n        }) => `<li class=\"film__item\">\n        <a class=\"film__link\" id=\"${id}\">\n  <div class=\"film__wrap\">\n  <img src=${\n    poster_path ? `https://image.tmdb.org/t/p/original${poster_path}` : img\n  } class=\"film-item__img\" alt=\"${title}\" width=\"300\">\n  </div>\n  <div class=\"film__title-wrap\">\n  <h3 class=\"film__title\">${title}</h3>\n  </div>\n  <div class=\"film__genres-and-date\">\n  <p class=\"film__genres\">${\n    searchGenresById(genre_ids) ? searchGenresById(genre_ids) : 'Unknown genre'\n  }</p>\n  <p class=\"film__release-date\">${\n    release_date ? new Date(release_date).getFullYear() : 'Nobody know'\n  }</p>\n  \n  \n   </div>\n   </a>\n   </li>`\n      )\n      .join('');\n    // Running render function\n    renderFoo(filmCards, refs.cardListEl);\n    preloaderRefreshOFF();\n    return filmCards;\n  }\n}\n\nfunction errorMessage() {\n  preloaderRefreshOFF();\n  //Making message visible\n  refs.headerErrorEl.classList.remove('visually-hidden');\n  //Form element cleaning\n  refs.headerFormEl.reset();\n}\n"],"names":["parcelRequire","register","JSON","parse","$2vqxs","$fad49ad56638fa2d$exports","URL","resolve","import","meta","url","toString","$lUsL3","$d647d88d10b4b0f7$export$7c53ee41a616369d","$krGWQ","refs","bodyEl","classList","add","preloaderEl","remove","setTimeout","scrollIntoView","top","behavior","$d647d88d10b4b0f7$export$f738f829ee269bf","arrElements","Array","from","imgElArr","length","forEach","el","index","onload","$d647d88d10b4b0f7$var$onLoad","e","window","removeEventListener","addEventListener","$1bab9c519cfa82bc$var$apiFilmoteka","default","$1bab9c519cfa82bc$var$paginationBox","document","querySelector","$1bab9c519cfa82bc$var$globalCurrentpage","$1bab9c519cfa82bc$export$2e2bcd8739ae039","currentPage","allPages","markup","innerHTML","async","evt","target","nodeName","textContent","setPageNumber","filesFromBackend","fetchPopularsFilms","$anlFm","cleanerMarkup","$1bab9c519cfa82bc$var$cardListEl","$1bab9c519cfa82bc$var$createMainMarkup","pageNumber","totalPages","console","log","page","Number","fetchedData","fetchDataValue","filmCards","map","id","poster_path","title","genre_ids","release_date","img","searchGenresById","Date","getFullYear","join","$cky31","renderFoo","$deaf12725bb60d2e$var$api","results","$parcel$interopDefault","cardListEl","$deaf12725bb60d2e$export$dda24948a95963","$891ef91b81746a65$var$api","$891ef91b81746a65$var$errorMessage","headerErrorEl","headerFormEl","reset","event","preventDefault","query","elements","value","trim","setFilmName","$891ef91b81746a65$var$createMainMarkup","fetchFilmsByName"],"version":3,"file":"index.80d38604.js.map"}